# 0 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.cpp"
# 21 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.cpp"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/ICommandAction.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/ICommandAction.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ControlRelayOutputBlock.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ControlRelayOutputBlock.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/CommandStatus.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/CommandStatus.h"
# 1 "/usr/include/c++/11/cstdint" 1 3
# 32 "/usr/include/c++/11/cstdint" 3
       
# 33 "/usr/include/c++/11/cstdint" 3





# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 1 3
# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3

# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 300 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 586 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 2 3
# 587 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/cpu_defines.h" 1 3
# 590 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3
# 39 "/usr/include/c++/11/cstdint" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/11/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;





}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/CommandStatus.h" 2


# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/CommandStatus.h"
namespace opendnp3 {





enum class CommandStatus : uint8_t
{

  SUCCESS = 0,

  TIMEOUT = 1,

  NO_SELECT = 2,

  FORMAT_ERROR = 3,

  NOT_SUPPORTED = 4,

  ALREADY_ACTIVE = 5,

  HARDWARE_ERROR = 6,

  LOCAL = 7,

  TOO_MANY_OPS = 8,

  NOT_AUTHORIZED = 9,

  AUTOMATION_INHIBIT = 10,

  PROCESSING_LIMITED = 11,

  OUT_OF_RANGE = 12,

  DOWNSTREAM_LOCAL = 13,

  ALREADY_COMPLETE = 14,

  BLOCKED = 15,

  CANCELLED = 16,

  BLOCKED_OTHER_MASTER = 17,

  DOWNSTREAM_FAIL = 18,

  NON_PARTICIPATING = 126,

  UNDEFINED = 127
};

uint8_t CommandStatusToType(CommandStatus arg);
CommandStatus CommandStatusFromType(uint8_t arg);
char const* CommandStatusToString(CommandStatus arg);

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ControlRelayOutputBlock.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/ControlCode.h" 1
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/ControlCode.h"
namespace opendnp3 {





enum class ControlCode : uint8_t
{

  NUL = 0x0,

  NUL_CANCEL = 0x20,

  PULSE_ON = 0x1,

  PULSE_ON_CANCEL = 0x21,

  PULSE_OFF = 0x2,

  PULSE_OFF_CANCEL = 0x22,

  LATCH_ON = 0x3,

  LATCH_ON_CANCEL = 0x23,

  LATCH_OFF = 0x4,

  LATCH_OFF_CANCEL = 0x24,

  CLOSE_PULSE_ON = 0x41,

  CLOSE_PULSE_ON_CANCEL = 0x61,

  TRIP_PULSE_ON = 0x81,

  TRIP_PULSE_ON_CANCEL = 0xA1,

  UNDEFINED = 0xFF
};

uint8_t ControlCodeToType(ControlCode arg);
ControlCode ControlCodeFromType(uint8_t arg);
char const* ControlCodeToString(ControlCode arg);

}
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ControlRelayOutputBlock.h" 2

namespace opendnp3
{
# 37 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ControlRelayOutputBlock.h"
class ControlRelayOutputBlock
{
public:


 ControlRelayOutputBlock(
     ControlCode code = ControlCode::LATCH_ON,
     uint8_t count = 1,
     uint32_t onTime = 100,
     uint32_t offTime = 100,
     CommandStatus status = CommandStatus::SUCCESS);


 ControlRelayOutputBlock(
     uint8_t rawCode,
     uint8_t count = 1,
     uint32_t onTime = 100,
     uint32_t offTime = 100,
     CommandStatus status = CommandStatus::SUCCESS);


 ControlCode functionCode;

 uint8_t rawCode;

 uint8_t count;

 uint32_t onTimeMS;

 uint32_t offTimeMS;

 CommandStatus status;

 bool ValuesEqual(const ControlRelayOutputBlock& lhs) const
 {
  return (functionCode == lhs.functionCode) &&
         (count == lhs.count) &&
         (onTimeMS == lhs.onTimeMS) &&
         (offTimeMS == lhs.offTimeMS);
 }

 bool operator==(const ControlRelayOutputBlock& lhs) const
 {
  return this->ValuesEqual(lhs) && (this->status == lhs.status);
 }
};


}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/ICommandAction.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/AnalogOutput.h" 1
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/AnalogOutput.h"
namespace opendnp3
{





template <class T>
class AnalogOutput
{
public:

 AnalogOutput() :
  value(0),
  status(CommandStatus::SUCCESS)
 {}

 AnalogOutput(T value_) :
  value(value_),
  status(CommandStatus::SUCCESS)
 {}

 AnalogOutput(T value_, CommandStatus status_) :
  value(value_),
  status(status_)
 {}

 bool ValuesEqual(const AnalogOutput<T>& lhs) const
 {
  return value == lhs.value;
 }

 T value;




 CommandStatus status;
};




class AnalogOutputInt16 : public AnalogOutput<int16_t>
{
public:

 AnalogOutputInt16();
 AnalogOutputInt16(int16_t);
 AnalogOutputInt16(int16_t, CommandStatus);

 bool operator==(const AnalogOutputInt16& arRHS) const;
};




class AnalogOutputInt32 : public AnalogOutput<int32_t>
{
public:

 AnalogOutputInt32();
 AnalogOutputInt32(int32_t);
 AnalogOutputInt32(int32_t, CommandStatus);

 bool operator==(const AnalogOutputInt32& arRHS) const;
};




class AnalogOutputFloat32 : public AnalogOutput<float>
{
public:

 AnalogOutputFloat32();
 AnalogOutputFloat32(float);
 AnalogOutputFloat32(float, CommandStatus);

 bool operator==(const AnalogOutputFloat32& arRHS) const;
};




class AnalogOutputDouble64 : public AnalogOutput<double>
{
public:

 AnalogOutputDouble64();
 AnalogOutputDouble64(double);
 AnalogOutputDouble64(double, CommandStatus);

 bool operator==(const AnalogOutputDouble64& arRHS) const;
};


}
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/ICommandAction.h" 2

namespace opendnp3
{




class ICommandAction
{
public:
 virtual ~ICommandAction() {}

 virtual CommandStatus Action(const ControlRelayOutputBlock& arCommand, uint16_t aIndex) = 0;

 virtual CommandStatus Action(const AnalogOutputInt16& arCommand, uint16_t aIndex) = 0;

 virtual CommandStatus Action(const AnalogOutputInt32& arCommand, uint16_t aIndex) = 0;

 virtual CommandStatus Action(const AnalogOutputFloat32& arCommand, uint16_t aIndex) = 0;

 virtual CommandStatus Action(const AnalogOutputDouble64& arCommand, uint16_t aIndex) = 0;

};

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.h" 2

# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h" 1
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ITransactable.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ITransactable.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h"
namespace openpal
{



class Uncopyable
{
protected:
 Uncopyable() {}
 ~Uncopyable() {}

private:

 Uncopyable(const Uncopyable&) = delete;
 Uncopyable& operator=(const Uncopyable&) = delete;
};

class StaticOnly
{

private:

 StaticOnly() = delete;
 StaticOnly(const StaticOnly&) = delete;
 StaticOnly& operator=(const StaticOnly&) = delete;
};

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ITransactable.h" 2

namespace opendnp3
{




class ITransactable
{
public:

 friend class Transaction;
 virtual ~ITransactable() {}

protected:

 virtual void Start() = 0;
 virtual void End() = 0;
};




class Transaction : private openpal::Uncopyable
{
public:

 Transaction(ITransactable& transactable) : pTransactable(&transactable)
 {
  pTransactable->Start();
 }

 Transaction(ITransactable* pTransactable_) : pTransactable(pTransactable_)
 {
  if (pTransactable)
  {
   pTransactable->Start();
  }
 }

 ~Transaction()
 {
  if (pTransactable)
  {
   pTransactable->End();
  }
 }

 static void Start(ITransactable* t)
 {
  if (t)
  {
   t->Start();
  }
 }
 static void End(ITransactable* t)
 {
  if (t)
  {
   t->End();
  }
 }

 template <class ReturnType, class TransactionType, class Fun>
 static ReturnType Apply(TransactionType& transactable, const Fun& fun)
 {
  Transaction t(transactable);
  return fun(transactable);
 }

private:
 ITransactable* pTransactable;

};

}
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/OperateType.h" 1
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/OperateType.h"
namespace opendnp3 {




enum class OperateType : uint8_t
{

  SelectBeforeOperate = 0x0,

  DirectOperate = 0x1,

  DirectOperateNoAck = 0x2
};


}
# 28 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h" 2

namespace opendnp3
{






class ICommandHandler : public ITransactable
{
public:
 virtual ~ICommandHandler() {}
# 49 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Select(const ControlRelayOutputBlock& command, uint16_t index) = 0;
# 59 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Operate(const ControlRelayOutputBlock& command, uint16_t index, OperateType opType) = 0;
# 69 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Select(const AnalogOutputInt16& command, uint16_t index) = 0;
# 79 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Operate(const AnalogOutputInt16& command, uint16_t index, OperateType opType) = 0;
# 89 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Select(const AnalogOutputInt32& command, uint16_t index) = 0;
# 99 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Operate(const AnalogOutputInt32& command, uint16_t index, OperateType opType) = 0;
# 108 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Select(const AnalogOutputFloat32& command, uint16_t index) = 0;
# 118 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Operate(const AnalogOutputFloat32& command, uint16_t index, OperateType opType) = 0;
# 127 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Select(const AnalogOutputDouble64& command, uint16_t index) = 0;
# 137 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/ICommandHandler.h"
 virtual CommandStatus Operate(const AnalogOutputDouble64& command, uint16_t index, OperateType opType) = 0;

};

}
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.h" 2

namespace opendnp3
{




class CommandActionAdapter : public ICommandAction
{

public:

 CommandActionAdapter(ICommandHandler* handler, bool isSelect, OperateType opType);

 ~CommandActionAdapter();

 virtual CommandStatus Action(const ControlRelayOutputBlock& command, uint16_t index) final;

 virtual CommandStatus Action(const AnalogOutputInt16& command, uint16_t index) final;

 virtual CommandStatus Action(const AnalogOutputInt32& command, uint16_t index) final;

 virtual CommandStatus Action(const AnalogOutputFloat32& command, uint16_t index) final;

 virtual CommandStatus Action(const AnalogOutputDouble64& command, uint16_t index) final;

private:

 template <class T>
 CommandStatus ActionT(const T& command, uint16_t index)
 {
  this->CheckStart();
  return m_isSelect ? m_handler->Select(command, index) : m_handler->Operate(command, index, m_opType);
 }

 void CheckStart();

 ICommandHandler* m_handler;
 bool m_isSelect;
 OperateType m_opType;
 bool m_isStarted;

};

}
# 22 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/CommandActionAdapter.cpp" 2



namespace opendnp3
{

CommandActionAdapter::CommandActionAdapter(ICommandHandler* handler, bool isSelect, OperateType opType) :
 m_handler(handler),
 m_isSelect(isSelect),
 m_opType(opType),
 m_isStarted(false)
{}

CommandActionAdapter::~CommandActionAdapter()
{
 if (m_isStarted)
 {
  Transaction::End(m_handler);
 }
}

void CommandActionAdapter::CheckStart()
{
 if (!m_isStarted)
 {
  m_isStarted = true;
  Transaction::Start(m_handler);
 }
}

CommandStatus CommandActionAdapter::Action(const ControlRelayOutputBlock& command, uint16_t index)
{
 return this->ActionT(command, index);
}

CommandStatus CommandActionAdapter::Action(const AnalogOutputInt16& command, uint16_t index)
{
 return this->ActionT(command, index);
}

CommandStatus CommandActionAdapter::Action(const AnalogOutputInt32& command, uint16_t index)
{
 return this->ActionT(command, index);
}

CommandStatus CommandActionAdapter::Action(const AnalogOutputFloat32& command, uint16_t index)
{
 return this->ActionT(command, index);
}

CommandStatus CommandActionAdapter::Action(const AnalogOutputDouble64& command, uint16_t index)
{
 return this->ActionT(command, index);
}

}
