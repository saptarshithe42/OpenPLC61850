# 0 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.cpp"
# 21 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.cpp"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/APDUHeader.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/APDUHeader.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h"
# 1 "/usr/include/c++/11/cstdint" 1 3
# 32 "/usr/include/c++/11/cstdint" 3
       
# 33 "/usr/include/c++/11/cstdint" 3





# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 1 3
# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3

# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 300 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 586 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 2 3
# 587 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/cpu_defines.h" 1 3
# 590 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3
# 39 "/usr/include/c++/11/cstdint" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/11/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;





}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h" 2


# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h"
namespace opendnp3 {




enum class FunctionCode : uint8_t
{

  CONFIRM = 0x0,

  READ = 0x1,

  WRITE = 0x2,

  SELECT = 0x3,

  OPERATE = 0x4,

  DIRECT_OPERATE = 0x5,

  DIRECT_OPERATE_NR = 0x6,

  IMMED_FREEZE = 0x7,

  IMMED_FREEZE_NR = 0x8,

  FREEZE_CLEAR = 0x9,

  FREEZE_CLEAR_NR = 0xA,

  FREEZE_AT_TIME = 0xB,

  FREEZE_AT_TIME_NR = 0xC,

  COLD_RESTART = 0xD,

  WARM_RESTART = 0xE,

  INITIALIZE_DATA = 0xF,

  INITIALIZE_APPLICATION = 0x10,

  START_APPLICATION = 0x11,

  STOP_APPLICATION = 0x12,

  SAVE_CONFIGURATION = 0x13,

  ENABLE_UNSOLICITED = 0x14,

  DISABLE_UNSOLICITED = 0x15,

  ASSIGN_CLASS = 0x16,

  DELAY_MEASURE = 0x17,

  RECORD_CURRENT_TIME = 0x18,

  OPEN_FILE = 0x19,

  CLOSE_FILE = 0x1A,

  DELETE_FILE = 0x1B,

  GET_FILE_INFO = 0x1C,

  AUTHENTICATE_FILE = 0x1D,

  ABORT_FILE = 0x1E,

  AUTH_REQUEST = 0x20,

  AUTH_REQUEST_NO_ACK = 0x21,

  RESPONSE = 0x81,

  UNSOLICITED_RESPONSE = 0x82,

  AUTH_RESPONSE = 0x83,

  UNKNOWN = 0xFF
};

uint8_t FunctionCodeToType(FunctionCode arg);
FunctionCode FunctionCodeFromType(uint8_t arg);
char const* FunctionCodeToString(FunctionCode arg);

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/APDUHeader.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/AppControlField.h" 1
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/AppControlField.h"
namespace opendnp3
{



struct AppControlField
{
 const static AppControlField DEFAULT;

 static AppControlField Request(uint8_t seq);

 AppControlField();

 explicit AppControlField(uint8_t byte);

 AppControlField(bool fir, bool fin, bool con, bool uns, uint8_t seq = 0);

 uint8_t ToByte() const;

 bool IsFirAndFin() const
 {
  return FIR && FIN;
 }

 bool FIR;
 bool FIN;
 bool CON;
 bool UNS;
 uint8_t SEQ;

private:

 static const uint8_t FIR_MASK = 0x80;
 static const uint8_t FIN_MASK = 0x40;
 static const uint8_t CON_MASK = 0x20;
 static const uint8_t UNS_MASK = 0x10;
 static const uint8_t SEQ_MASK = 0x0F;
};

}
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/APDUHeader.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/IINField.h" 1
# 26 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/opendnp3/app/IINField.h"
namespace opendnp3
{

enum class IINBit
{
 ALL_STATIONS = 0,
 CLASS1_EVENTS,
 CLASS2_EVENTS,
 CLASS3_EVENTS,
 NEED_TIME,
 LOCAL_CONTROL,
 DEVICE_TROUBLE,
 DEVICE_RESTART,
 FUNC_NOT_SUPPORTED,
 OBJECT_UNKNOWN,
 PARAM_ERROR,
 EVENT_BUFFER_OVERFLOW,
 ALREADY_EXECUTING,
 CONFIG_CORRUPT,
 RESERVED1,
 RESERVED2 = 15
};



class IINField
{

private:

 enum class LSBMask : uint8_t
 {
  ALL_STATIONS = 0x01,
  CLASS1_EVENTS = 0x02,
  CLASS2_EVENTS = 0x04,
  CLASS3_EVENTS = 0x08,
  NEED_TIME = 0x10,
  LOCAL_CONTROL = 0x20,
  DEVICE_TROUBLE = 0x40,
  DEVICE_RESTART = 0x80,
 };

 enum class MSBMask : uint8_t
 {
  FUNC_NOT_SUPPORTED = 0x01,
  OBJECT_UNKNOWN = 0x02,
  PARAM_ERROR = 0x04,
  EVENT_BUFFER_OVERFLOW = 0x08,
  ALREADY_EXECUTING = 0x10,
  CONFIG_CORRUPT = 0x20,
  RESERVED1 = 0x40,
  RESERVED2 = 0x80,


  REQUEST_ERROR_MASK = FUNC_NOT_SUPPORTED | OBJECT_UNKNOWN | PARAM_ERROR
 };


public:

 static IINField Empty()
 {
  return IINField(0, 0);
 }

 IINField(IINBit bit) : LSB(0), MSB(0)
 {
  this->SetBit(bit);
 }

 IINField(uint8_t aLSB, uint8_t aMSB) : LSB(aLSB), MSB(aMSB)
 {}

 IINField() : LSB(0), MSB(0)
 {}

 bool IsSet(IINBit bit) const;

 bool IsClear(IINBit bit) const
 {
  return !IsSet(bit);
 }

 void SetBit(IINBit bit);
 void ClearBit(IINBit bit);

 void SetBitToValue(IINBit bit, bool value);

 bool operator==(const IINField& arRHS) const;

 bool Any() const
 {
  return (LSB | MSB) != 0;
 }

 void Clear()
 {
  LSB = MSB = 0;
 }

 bool HasRequestError() const
 {
  return Get(MSBMask::REQUEST_ERROR_MASK);
 }

 IINField operator|(const IINField& aIIN) const
 {
  return IINField(LSB | aIIN.LSB, MSB | aIIN.MSB);
 }

 IINField& operator|=(const IINField& aIIN)
 {
  MSB |= aIIN.MSB;
  LSB |= aIIN.LSB;
  return *this;
 }

 IINField operator&(const IINField& aIIN) const
 {
  return IINField(LSB & aIIN.LSB, MSB & aIIN.MSB);
 }

 IINField& operator&=(const IINField& aIIN)
 {
  MSB &= aIIN.MSB;
  LSB &= aIIN.LSB;
  return *this;
 }

 IINField operator~() const
 {
  return IINField(~LSB, ~MSB);
 }

 uint8_t LSB;
 uint8_t MSB;

private:

 static const uint8_t REQUEST_ERROR_MASK;

 inline bool Get(LSBMask bit) const
 {
  return (LSB & static_cast<uint8_t>(bit)) != 0;
 }

 inline bool Get(MSBMask bit) const
 {
  return (MSB & static_cast<uint8_t>(bit)) != 0;
 }

 inline void Set(LSBMask bit)
 {
  LSB |= static_cast<uint8_t>(bit);
 }
 inline void Set(MSBMask bit)
 {
  MSB |= static_cast<uint8_t>(bit);
 }

 inline void Clear(LSBMask bit)
 {
  LSB &= ~static_cast<uint8_t>(bit);
 }
 inline void Clear(MSBMask bit)
 {
  MSB &= ~static_cast<uint8_t>(bit);
 }
};

}
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/src/opendnp3/app/APDUHeader.h" 2

namespace opendnp3
{

const uint32_t APDU_REQUEST_HEADER_SIZE = 2;
const uint32_t APDU_RESPONSE_HEADER_SIZE = 4;

struct APDUHeader
{
 static APDUHeader SolicitedConfirm(uint8_t seq);
 static APDUHeader UnsolicitedConfirm(uint8_t seq);
 static APDUHeader Confirm(uint8_t seq, bool unsolicited);

 APDUHeader() : function(FunctionCode::UNKNOWN), control(true, true, false, false)
 {}

 explicit APDUHeader(const AppControlField& control_) : function(FunctionCode::UNKNOWN), control(control_)
 {}

 bool Equals(const APDUHeader& header) const
 {
  return (header.function == function) && (header.control.ToByte() == control.ToByte());
 }

 FunctionCode function;
 AppControlField control;
};

struct APDUResponseHeader : public APDUHeader
{
 APDUResponseHeader(const AppControlField control_, const IINField& iin) : APDUHeader(control_), IIN(iin)
 {}

 explicit APDUResponseHeader(const IINField& iin) : IIN(iin)
 {}

 APDUResponseHeader()
 {}

 IINField IIN;
};

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.h" 2

# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Buffer.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Buffer.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h"
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/HasSize.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/HasSize.h"
namespace openpal
{

template <class SizeType>
class HasSize
{

public:

 HasSize(SizeType size_) : size(size_)
 {}

 SizeType Size() const
 {
  return size;
 }

 bool IsEmpty() const
 {
  return size == 0;
 }

 bool IsNotEmpty() const
 {
  return size != 0;
 }

protected:

 SizeType size;

};

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h" 2

# 1 "/usr/include/assert.h" 1 3 4
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h" 2

namespace openpal
{




template <class ValueType, class IndexType>
class ArrayView : public HasSize<IndexType>
{

public:

 static ArrayView<ValueType, IndexType> Empty()
 {
  return ArrayView(nullptr, 0);
 }

 ArrayView(ValueType* start, IndexType aSize) : HasSize<IndexType>(aSize), buffer(start)
 {}

 inline bool Contains(IndexType index) const
 {
  return index < this->size;
 }

 inline bool Contains(IndexType start, IndexType stop) const
 {
  return (start < stop) && Contains(stop);
 }

 inline ValueType& operator[](IndexType index)
 {
  
# 60 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h" 3 4
 (static_cast<void> (0))
# 60 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h"
                           ;
  return buffer[index];
 }

 inline const ValueType& operator[](IndexType index) const
 {
  
# 66 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h" 3 4
 (static_cast<void> (0))
# 66 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/ArrayView.h"
                           ;
  return buffer[index];
 }

 template <class Action>
 void foreach(const Action& action)
 {
  for (IndexType i = 0; i < this->size; ++i)
  {
   action(buffer[i]);
  }
 }

 template <class Action>
 void foreachIndex(const Action& action)
 {
  for (IndexType i = 0; i < this->size; ++i)
  {
   action(buffer[i], i);
  }
 }

private:
 ValueType* buffer;
};



}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 2

# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/Configure.h" 1
# 34 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/Configure.h"
namespace openpal
{
namespace sizes
{

static const uint16_t MAX_ERASURE_SIZE = 12 * sizeof(void*);

}
}
# 78 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/Configure.h"
# 1 "/usr/include/c++/11/new" 1 3
# 38 "/usr/include/c++/11/new" 3
       
# 39 "/usr/include/c++/11/new" 3


# 1 "/usr/include/c++/11/bits/exception.h" 1 3
# 34 "/usr/include/c++/11/bits/exception.h" 3
       
# 35 "/usr/include/c++/11/bits/exception.h" 3

#pragma GCC visibility push(default)




# 40 "/usr/include/c++/11/bits/exception.h" 3
extern "C++" {

namespace std
{
# 61 "/usr/include/c++/11/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };



}

}

#pragma GCC visibility pop
# 42 "/usr/include/c++/11/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 126 "/usr/include/c++/11/new" 3
 void* operator new(std::size_t)
  __attribute__((__externally_visible__));
 void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

 void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 174 "/usr/include/c++/11/new" 3
 inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
 inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 230 "/usr/include/c++/11/new" 3
#pragma GCC visibility pop
# 79 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/Configure.h" 2
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h" 1
# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h"

# 24 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h"
namespace openpal
{



class Uncopyable
{
protected:
 Uncopyable() {}
 ~Uncopyable() {}

private:

 Uncopyable(const Uncopyable&) = delete;
 Uncopyable& operator=(const Uncopyable&) = delete;
};

class StaticOnly
{

private:

 StaticOnly() = delete;
 StaticOnly(const StaticOnly&) = delete;
 StaticOnly& operator=(const StaticOnly&) = delete;
};

}
# 28 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 2

# 1 "/usr/include/assert.h" 1 3 4
# 30 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 2


namespace openpal
{




template <class ValueType, class IndexType>
class Array : public HasSize<IndexType>
{

public:

 Array(IndexType size) :
  HasSize<IndexType>(size),
  buffer(new ValueType[size]())
 {}

 Array() :
  HasSize<IndexType>(0),
  buffer(nullptr)
 {}

 Array(const Array& copy) :
  HasSize<IndexType>(copy.Size()),
  buffer(new ValueType[copy.Size()])
 {
  for(IndexType i = 0; i < copy.Size(); ++i) buffer[i] = copy.buffer[i];
 }

 ArrayView<ValueType, IndexType> ToView() const
 {
  return ArrayView<ValueType, IndexType>(buffer, this->size);
 }

 inline bool Contains(IndexType index) const
 {
  return index < this->size;
 }

 inline ValueType& operator[](IndexType index)
 {
  
# 73 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 3 4
 (static_cast<void> (0))
# 73 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h"
                           ;
  return buffer[index];
 }

 const ValueType& operator[](IndexType index) const
 {
  
# 79 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h" 3 4
 (static_cast<void> (0))
# 79 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Array.h"
                           ;
  return buffer[index];
 }

 template <class Action>
 void foreach(const Action& action) const
 {
  for(IndexType i = 0; i < this->size; ++i) action(buffer[i]);
 }

 template <class Action>
 void foreach(const Action& action)
 {
  for(IndexType i = 0; i < this->size; ++i) action(buffer[i]);
 }

 template <class Action>
 void foreachIndex(const Action& action)
 {
  for(IndexType i = 0; i < this->size; ++i) action(buffer[i], i);
 }


 template <class Action>
 void foreachIndex(const Action& action) const
 {
  for(uint32_t i = 0; i < this->size; ++i) action(buffer[i], i);
 }

 virtual ~Array()
 {
  delete[] buffer;
 }

protected:

 ValueType* buffer;

private:

 Array& operator=(const Array&) = delete;
};

}
# 25 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Buffer.h" 2

# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/WSlice.h" 1
# 28 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/WSlice.h"
namespace openpal
{

class RSlice;





class WSlice : public HasSize<uint32_t>
{
public:

 static WSlice Empty();

 void SetAllTo(uint8_t value);

 WSlice();
 WSlice(uint8_t* pBuffer, uint32_t size);

 void Clear();

 uint32_t Advance(uint32_t count);

 WSlice Skip(uint32_t count) const;

 RSlice ToRSlice() const;

 operator uint8_t* ()
 {
  return pBuffer;
 };

 operator uint8_t const* () const
 {
  return pBuffer;
 };

private:

 uint8_t* pBuffer;
};


}
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Buffer.h" 2
# 1 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/RSlice.h" 1
# 28 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/RSlice.h"
namespace openpal
{

class WSlice;





class RSlice : public HasSize<uint32_t>
{

public:

 static RSlice Empty();

 RSlice();

 RSlice(uint8_t const* pBuffer, uint32_t size);

 void Clear();

 RSlice CopyTo(WSlice&) const;

 RSlice Take(uint32_t count) const;

 RSlice Skip(uint32_t count) const;

 bool Equals(const RSlice& rhs) const;

 void Advance(uint32_t count);

 operator uint8_t const* () const
 {
  return pBuffer;
 };

private:
 uint8_t const* pBuffer;

};

}
# 28 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/./cpp/libs/include/openpal/container/Buffer.h" 2



namespace openpal
{

class Buffer : public Array<uint8_t, uint32_t>
{

public:

 Buffer();

 Buffer(uint32_t size);


 Buffer(const RSlice& input);

 virtual ~Buffer() {}

 RSlice ToRSlice() const;

 WSlice GetWSlice();

 WSlice GetWSlice(uint32_t maxSize);

 const uint8_t* operator()() const
 {
  return buffer;
 }

 uint8_t* operator()()
 {
  return buffer;
 }
};

}
# 27 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.h" 2


namespace opendnp3
{




class DeferredRequest : private openpal::Uncopyable
{

public:

 explicit DeferredRequest(uint32_t maxAPDUSize);

 void Reset();

 bool IsSet() const;

 FunctionCode GetFunction() const;

 void Set(APDUHeader header, openpal::RSlice objects);

 template <class Handler>
 bool Process(const Handler& handler);

private:

 DeferredRequest() = delete;

 bool isSet;
 APDUHeader header;
 openpal::RSlice objects;
 openpal::Buffer buffer;

};

template <class Handler>
bool DeferredRequest::Process(const Handler& handler)
{
 if (isSet)
 {
  bool processed = handler(header, objects);
  isSet = !processed;
  return processed;
 }
 else
 {
  return false;
 }
}

}
# 22 "/home/saptarshi/Desktop/OpenPLC61850/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/DeferredRequest.cpp" 2

namespace opendnp3
{

DeferredRequest::DeferredRequest(uint32_t maxAPDUSize) : isSet(false), buffer(maxAPDUSize)
{}

void DeferredRequest::Reset()
{
 isSet = false;
}

bool DeferredRequest::IsSet() const
{
 return isSet;
}

FunctionCode DeferredRequest::GetFunction() const
{
 return header.function;
}

void DeferredRequest::Set(APDUHeader header_, openpal::RSlice objects_)
{
 this->isSet = true;
 this->header = header_;
 auto dest = buffer.GetWSlice();
 this->objects = objects_.CopyTo(dest);
}

}
